"use client";

import { useEffect, useState } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { useAuth } from '@/hooks/use-auth';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import * as z from 'zod';

import { Button } from '@/components/ui/button';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { useToast } from '@/hooks/use-toast';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Loader2, Save, Download, ArrowLeft } from 'lucide-react';
import type { Resume } from '@/types';

const resumeSchema = z.object({
  title: z.string().min(5, { message: 'Title must be at least 5 characters.' }),
  latexContent: z.string().min(1, { message: 'LaTeX content cannot be empty.' }),
});

type ResumeFormValues = z.infer<typeof resumeSchema>;

export default function ResumePage() {
  const { user, loading } = useAuth();
  const router = useRouter();
  const params = useParams();
  const { toast } = useToast();
  const [resume, setResume] = useState<Omit<Resume, 'createdAt'> & { createdAt: Date } | null>(null);
  const [isSaving, setIsSaving] = useState(false);
  
  const id = params.id as string;

  const form = useForm<ResumeFormValues>({
    resolver: zodResolver(resumeSchema),
    defaultValues: {
      title: '',
      latexContent: '',
    },
  });

  useEffect(() => {
    if (!loading && !user) {
      router.push('/login');
    }
  }, [user, loading, router]);
  
  useEffect(() => {
    if (user && id) {
      // For demo, we retrieve from sessionStorage. In a real app, fetch from Firestore.
      const savedResumeData = sessionStorage.getItem(`resume-${id}`);
      if (savedResumeData) {
        const parsedData = JSON.parse(savedResumeData);
        parsedData.createdAt = new Date(parsedData.createdAt);
        setResume(parsedData);
        form.reset({
          title: parsedData.title,
          latexContent: parsedData.latexContent,
        });
      } else {
        // Mock data if not in session storage for direct navigation
        const mockResume = {
            id,
            userId: user.uid,
            title: 'Sample Resume',
            jobDescription: 'A sample job description.',
            latexContent: `\\documentclass[a4paper,10pt]{article}
\\usepackage[utf8]{inputenc}
\\title{Your Name}
\\author{Your Details}
\\date{\\today}
\\begin{document}
\\maketitle
\\section{Introduction}
This is a sample resume generated by ResumAI.
\\end{document}`,
            createdAt: new Date(),
        };
        setResume(mockResume);
        form.reset({
          title: mockResume.title,
          latexContent: mockResume.latexContent,
        });
      }
    }
  }, [user, id, form]);
  
  async function onSave(data: ResumeFormValues) {
    if (!user || !resume) return;
    setIsSaving(true);
    toast({ title: 'Saving resume...' });

    try {
      // In a real app, update Firestore document for resume with id
      await new Promise(resolve => setTimeout(resolve, 1000));
      const updatedResume = { ...resume, ...data };
      sessionStorage.setItem(`resume-${id}`, JSON.stringify(updatedResume));
      setResume(updatedResume);
      
      toast({ title: 'Resume Saved!', description: 'Your changes have been saved.' });
    } catch (error) {
      toast({ variant: 'destructive', title: 'Error', description: 'Failed to save resume.' });
    } finally {
      setIsSaving(false);
    }
  }

  const handleDownloadTex = () => {
    const content = form.getValues('latexContent');
    const title = form.getValues('title').replace(/ /g, '_').toLowerCase();
    const blob = new Blob([content], { type: 'text/x-latex' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${title}.tex`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };
  
  if (loading || !user) {
    return <div className="container mx-auto p-4 md:p-8"><p>Loading...</p></div>;
  }
  if (!resume) {
    return <div className="container mx-auto p-4 md:p-8"><p>Loading resume...</p></div>;
  }

  return (
    <div className="container mx-auto p-4 md:p-8">
      <Button variant="ghost" onClick={() => router.push('/dashboard')} className="mb-4">
        <ArrowLeft className="mr-2 h-4 w-4" /> Back to Dashboard
      </Button>

      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSave)} className="space-y-6">
          <div className="flex justify-between items-start">
            <FormField
              control={form.control}
              name="title"
              render={({ field }) => (
                <FormItem className="flex-grow">
                  <FormControl>
                    <Input {...field} className="text-2xl font-bold font-headline border-0 shadow-none p-0 focus-visible:ring-0" />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <div className="space-x-2 flex-shrink-0 ml-4">
              <Button type="button" variant="outline" onClick={handleDownloadTex}>
                <Download className="mr-2 h-4 w-4" /> Download .tex
              </Button>
              <Button type="submit" disabled={isSaving}>
                {isSaving && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                <Save className="mr-2 h-4 w-4" /> Save
              </Button>
            </div>
          </div>
          
          <div className="grid md:grid-cols-2 gap-6 h-[calc(100vh-250px)]">
            <FormField
              control={form.control}
              name="latexContent"
              render={({ field }) => (
                <FormItem className="flex flex-col h-full">
                  <FormLabel className="font-headline">LaTeX Code</FormLabel>
                  <FormControl className="flex-grow">
                    <Textarea
                      placeholder="Your generated LaTeX code will appear here."
                      className="h-full resize-none font-code text-xs"
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            
            <Card className="h-full flex flex-col">
              <CardHeader>
                <CardTitle className="font-headline">Preview</CardTitle>
                <CardDescription>A preview of your rendered resume. Download to see the final PDF.</CardDescription>
              </CardHeader>
              <CardContent className="flex-grow bg-muted/50 rounded-b-lg p-4 overflow-auto">
                 <pre className="text-xs whitespace-pre-wrap font-code text-muted-foreground p-4 bg-white rounded">
                  {form.watch('latexContent')}
                </pre>
                <div className="mt-4 text-center text-sm text-muted-foreground">
                  (Live PDF preview not available. Please download the .tex file and compile it on your machine.)
                </div>
              </CardContent>
            </Card>
          </div>
        </form>
      </Form>
    </div>
  );
}
